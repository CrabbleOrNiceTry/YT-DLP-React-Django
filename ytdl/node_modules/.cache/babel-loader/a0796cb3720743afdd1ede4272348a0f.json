{"ast":null,"code":"var _jsxFileName = \"/home/cbac/Documents/prgTHINGS/YTDL/react-ytdl/ytdl/src/App.tsx\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Form from './Components/Form/Form';\nimport DisplayVideos from './Components/Video/Video';\nimport axios from \"axios\";\nimport Header from './Components/Header/Header';\nimport { API_URL } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      videos: [],\n      bestVideo: {},\n      processingStatus: false\n    };\n\n    this.handleSubmit = urlPassed => {\n      this.setState({\n        videos: []\n      });\n      axios.post(API_URL, {\n        'url': urlPassed\n      }).then(res => {\n        this.setState({\n          videos: res\n        });\n        const highestResObj = res.data.reduce((prev, curr) => {\n          return parseInt(prev.res, 10) > parseInt(curr.res, 10) ? prev : curr;\n        });\n        this.setState({\n          bestVideo: highestResObj\n        });\n        console.log(state.bestVideo); // for (let i = 0; i < res.data.length; i++) {\n        // }\n        // const keys = Object.keys(res.data);\n        // console.log(res);\n        // for (let i = 0; i < keys.length; i++) {\n        //   this.setState({\n        //     response_url: [...this.state.response_url, { res: res.data.keys[i], url: res.data[keys[i]] }]\n        //   })\n        // }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          handleSubmit: this.handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), this.state.videos.length !== 0 ? /*#__PURE__*/_jsxDEV(DisplayVideos, {\n          video: this.state.bestVideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 47\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 96\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-3\",\n          children: \"To save bandwidth on our side and increase download speeds for our users, the download is routed through Google's server.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2\",\n          children: \"Once converted, click \\\"Go to raw video,\\\" wait to be redirected, and right click the player and select \\\"Save video as...\\\".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        id: \"urlHelp\",\n        className: \"form-text text-muted bottom\",\n        children: [\"We're open source! Check out our \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/CrabbleOrNiceTry/YT-DLP-React-Django\",\n          target: \"blank\",\n          children: \"Github\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 102\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/cbac/Documents/prgTHINGS/YTDL/react-ytdl/ytdl/src/App.tsx"],"names":["React","Component","Form","DisplayVideos","axios","Header","API_URL","App","state","videos","bestVideo","processingStatus","handleSubmit","urlPassed","setState","post","then","res","highestResObj","data","reduce","prev","curr","parseInt","console","log","render","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAAsC,0BAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,OAAT,QAAwB,GAAxB;;;AAGA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BO,KAF0B,GAElB;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,SAAS,EAAE,EAFL;AAGNC,MAAAA,gBAAgB,EAAE;AAHZ,KAFkB;;AAAA,SAQ1BC,YAR0B,GAQVC,SAAD,IAAuB;AACpC,WAAKC,QAAL,CAAc;AAAEL,QAAAA,MAAM,EAAE;AAAV,OAAd;AACAL,MAAAA,KAAK,CAACW,IAAN,CAAWT,OAAX,EAAoB;AAAE,eAAOO;AAAT,OAApB,EAA0CG,IAA1C,CAAgDC,GAAD,IAAS;AACtD,aAAKH,QAAL,CAAc;AAAEL,UAAAA,MAAM,EAAEQ;AAAV,SAAd;AACA,cAAMC,aAAa,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgB,CAACC,IAAD,EAAYC,IAAZ,KAA0B;AAC9D,iBAAOC,QAAQ,CAACF,IAAI,CAACJ,GAAN,EAAW,EAAX,CAAR,GAAyBM,QAAQ,CAACD,IAAI,CAACL,GAAN,EAAW,EAAX,CAAjC,GAAkDI,IAAlD,GAAyDC,IAAhE;AACD,SAFqB,CAAtB;AAGA,aAAKR,QAAL,CAAc;AAAEJ,UAAAA,SAAS,EAAEQ;AAAb,SAAd;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAK,CAACE,SAAlB,EANsD,CAOtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAhBD;AAiBD,KA3ByB;AAAA;;AA6B1BgB,EAAAA,MAAM,GAAG;AACP,wBAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,EAAf;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,YAAY,EAAE,KAAKd;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADF,EAEI,KAAKJ,KAAL,CAAWC,MAAX,CAAkBkB,MAAlB,KAA6B,CAA9B,gBAAmC,QAAC,aAAD;AAAe,UAAA,KAAK,EAAE,KAAKnB,KAAL,CAAWE;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAAnC,gBAAoF;AAAA;AAAA;AAAA;AAAA,gBAFvF,eAGE;AAAG,UAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAME;AAAG,UAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAaE;AAAO,QAAA,EAAE,EAAC,SAAV;AAAoB,QAAA,SAAS,EAAC,6BAA9B;AAAA,qEAA6F;AAAG,UAAA,IAAI,EAAC,yDAAR;AAAkE,UAAA,MAAM,EAAC,OAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA7F;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAkBD;;AAhDyB;;AAmD5B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './Components/Form/Form';\nimport DisplayVideos, { IVideo } from './Components/Video/Video'\nimport axios from \"axios\";\nimport Header from './Components/Header/Header';\nimport { API_URL } from '.';\n\n\nclass App extends Component {\n\n  state = {\n    videos: [],\n    bestVideo: {} as IVideo,\n    processingStatus: false,\n  };\n\n  handleSubmit = (urlPassed: string) => {\n    this.setState({ videos: [] });\n    axios.post(API_URL, { 'url': urlPassed }).then((res) => {\n      this.setState({ videos: res });\n      const highestResObj = res.data.reduce((prev: any, curr: any) => {\n        return parseInt(prev.res, 10) > parseInt(curr.res, 10) ? prev : curr;\n      });\n      this.setState({ bestVideo: highestResObj });\n      console.log(state.bestVideo);\n      // for (let i = 0; i < res.data.length; i++) {\n      // }\n      // const keys = Object.keys(res.data);\n      // console.log(res);\n      // for (let i = 0; i < keys.length; i++) {\n      //   this.setState({\n      //     response_url: [...this.state.response_url, { res: res.data.keys[i], url: res.data[keys[i]] }]\n      //   })\n      // }\n    });\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <Header />\n        <hr />\n        <div className=\"\">\n          <Form handleSubmit={this.handleSubmit} />\n          {(this.state.videos.length !== 0) ? <DisplayVideos video={this.state.bestVideo} /> : <div></div>}\n          <p className=\"mt-3\">\n            To save bandwidth on our side and increase download speeds for our users, the download is routed through Google's server.\n          </p>\n          <p className=\"mt-2\">\n            Once converted, click \"Go to raw video,\" wait to be redirected, and right click the player and select \"Save video as...\".\n          </p>\n        </div>\n        <small id=\"urlHelp\" className=\"form-text text-muted bottom\">We're open source! Check out our <a href=\"https://github.com/CrabbleOrNiceTry/YT-DLP-React-Django\" target=\"blank\">Github</a></small>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}